{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\82106\\\\Desktop\\\\github\\\\CodingOn-Web\\\\0928_practice\\\\todo_client\\\\src\\\\InputTodo.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// import { useState } from 'react';\n\nexport default function TodoMartin() {\n  _s();\n  const [todos, setTodos] = useState([]); // 할 일 목록\n  const [inputTodo, setInputTodo] = useState('');\n  const addTodo = () => {\n    // todos는 배열이다. 사용자가 할일을 적으면 그 값이 여기로 추가되도록 구현. 만약 할 일이 10개가 넘으면 경고 메시지 전송\n    if (todos.length > 10) {\n      alert('할 일이 너무 많아요');\n    }\n    if (inputTodo !== '') {\n      // input에 작성한 것이 있을 시에만 작동\n      // 새로운 객체를 만들고 이 객체를 todos에 넣는다.\n      const newTodo = {\n        id: Date.now(),\n        text: inputTodo,\n        checked: false\n      };\n      setTodos([...todos, newTodo]);\n      // todos에 넣었으면 다시 input창은 빈 문자열로 바뀜\n      setInputTodo('');\n    }\n  };\n\n  // 체크박스 on/off\n  const toggleTodo = id => {\n    setTodos(todos.map(todo => {\n      // console.log(todo);\n      // 내가 체크한 박스의 id가 todos에 있는 id와 동일하다면 todo의 나머지 요소는 변하지 않고 checked요소만 반대로 해준다.\n      return todo.id === id ? {\n        ...todo,\n        checked: !todo.checked\n      } : todo;\n    }));\n  };\n\n  // 선택된 체크박스만 삭제\n  const removeTodo = () => {\n    const result = todos.filter(value => value.checked === false);\n    setTodos(result);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputTodo,\n      onChange: e => setInputTodo(e.target.value),\n      placeholder: \"\\uD560 \\uC77C \\uC785\\uB825...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTodo,\n      children: \"\\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todos.map(todo => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: todo.checked,\n            onChange: () => toggleTodo(todo.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), todo.text]\n        }, todo.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: removeTodo,\n      children: \"\\uC644\\uB8CC\\uB41C \\uD560 \\uC77C \\uC0AD\\uC81C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TodoMartin, \"mPFGsDwVm25SIkx8SxzuFg6G8YA=\");\n_c = TodoMartin;\nvar _c;\n$RefreshReg$(_c, \"TodoMartin\");","map":{"version":3,"names":["TodoMartin","_s","todos","setTodos","useState","inputTodo","setInputTodo","addTodo","length","alert","newTodo","id","Date","now","text","checked","toggleTodo","map","todo","removeTodo","result","filter","value","_jsxDEV","_Fragment","children","type","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/82106/Desktop/github/CodingOn-Web/0928_practice/todo_client/src/InputTodo.js"],"sourcesContent":["// import { useState } from 'react';\r\n\r\nexport default function TodoMartin() {\r\n  const [todos, setTodos] = useState([]); // 할 일 목록\r\n  const [inputTodo, setInputTodo] = useState('');\r\n\r\n  const addTodo = () => {\r\n    // todos는 배열이다. 사용자가 할일을 적으면 그 값이 여기로 추가되도록 구현. 만약 할 일이 10개가 넘으면 경고 메시지 전송\r\n    if (todos.length > 10) {\r\n      alert('할 일이 너무 많아요');\r\n    }\r\n    if (inputTodo !== '') {\r\n      // input에 작성한 것이 있을 시에만 작동\r\n      // 새로운 객체를 만들고 이 객체를 todos에 넣는다.\r\n      const newTodo = {\r\n        id: Date.now(),\r\n        text: inputTodo,\r\n        checked: false,\r\n      };\r\n      setTodos([...todos, newTodo]);\r\n      // todos에 넣었으면 다시 input창은 빈 문자열로 바뀜\r\n      setInputTodo('');\r\n    }\r\n  };\r\n\r\n  // 체크박스 on/off\r\n  const toggleTodo = (id) => {\r\n    setTodos(\r\n      todos.map((todo) => {\r\n        // console.log(todo);\r\n        // 내가 체크한 박스의 id가 todos에 있는 id와 동일하다면 todo의 나머지 요소는 변하지 않고 checked요소만 반대로 해준다.\r\n        return todo.id === id ? { ...todo, checked: !todo.checked } : todo;\r\n      })\r\n    );\r\n  };\r\n\r\n  // 선택된 체크박스만 삭제\r\n  const removeTodo = () => {\r\n    const result = todos.filter((value) => value.checked === false);\r\n    setTodos(result);\r\n  };\r\n  return (\r\n    <>\r\n      <input\r\n        type='text'\r\n        value={inputTodo}\r\n        onChange={(e) => setInputTodo(e.target.value)}\r\n        placeholder='할 일 입력...'\r\n      ></input>\r\n      <button onClick={addTodo}>추가</button>\r\n      <ul>\r\n        {todos.map((todo) => {\r\n          return (\r\n            <li key={todo.id}>\r\n              <input type='checkbox' checked={todo.checked} onChange={() => toggleTodo(todo.id)} />\r\n              {todo.text}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n      <button onClick={removeTodo}>완료된 할 일 삭제</button>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}