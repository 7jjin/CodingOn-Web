{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\82106\\\\Desktop\\\\github\\\\CodingOn-Web\\\\0928_practice\\\\todo_client\\\\src\\\\InputTodo.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function InputTodo() {\n  _s();\n  const [inputTodo, setInputTodo] = useState('');\n  const [todoList, setTodoList] = useState([]);\n  useEffect(() => {\n    const todoData = async () => {\n      const res = await axios({\n        method: 'GET',\n        url: 'http://localhost:8000/todos'\n      });\n      setTodoList(res.data.data);\n    };\n    todoData();\n  }, []);\n  useEffect(() => {}, [todoList]);\n  const AddTodo = () => {\n    const newTodo = {\n      title: inputTodo,\n      done: false\n    };\n    setTodoList([...todoList, newTodo]);\n    setInputTodo('');\n    const todoData = async () => {\n      const res = await axios({\n        method: 'POST',\n        url: 'http://localhost:8000/todo',\n        data: newTodo\n      });\n      console.log(res.data.data);\n    };\n    todoData();\n  };\n\n  // 체크박스 on/off\n  const toggleTodo = id => {\n    console.log(id);\n    setTodoList(todoList.map(todo => {\n      // console.log(todo);\n      // 내가 체크한 박스의 id가 todos에 있는 id와 동일하다면 todo의 나머지 요소는 변하지 않고 checked요소만 반대로 해준다.\n      return todo.id === id ? {\n        ...todo,\n        done: !todo.done\n      } : todo;\n    }));\n  };\n\n  //   선택된 체크박스만 삭제\n  const removeTodo = id => {\n    const deleteData = async () => {\n      const res = await axios({\n        method: 'DELETE',\n        url: `http://localhost:8000/todo/:${id}`,\n        data: {\n          id: Number(id)\n        }\n      });\n      console.log('a');\n    };\n    deleteData();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputTodo,\n      onChange: e => setInputTodo(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: AddTodo,\n      children: \"\\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: todoList.map(todo => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: todo.done,\n            onChange: () => toggleTodo(todo.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), todo.title, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: removeTodo,\n            children: \"DELETE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, todo.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// import { useState } from 'react';\n\n// export default function TodoMartin() {\n//   const [todos, setTodos] = useState([]); // 할 일 목록\n//   const [inputTodo, setInputTodo] = useState('');\n\n//   const addTodo = () => {\n//     // todos는 배열이다. 사용자가 할일을 적으면 그 값이 여기로 추가되도록 구현. 만약 할 일이 10개가 넘으면 경고 메시지 전송\n//     if (todos.length > 10) {\n//       alert('할 일이 너무 많아요');\n//     }\n//     if (inputTodo !== '') {\n//       // input에 작성한 것이 있을 시에만 작동\n//       // 새로운 객체를 만들고 이 객체를 todos에 넣는다.\n//       const newTodo = {\n//         id: Date.now(),\n//         text: inputTodo,\n//         checked: false,\n//       };\n//       setTodos([...todos, newTodo]);\n//       // todos에 넣었으면 다시 input창은 빈 문자열로 바뀜\n//       setInputTodo('');\n//     }\n//   };\n\n//   // 체크박스 on/off\n//   const toggleTodo = (id) => {\n//     console.log(id);\n//     setTodos(\n//       todos.map((todo) => {\n//         // console.log(todo);\n//         // 내가 체크한 박스의 id가 todos에 있는 id와 동일하다면 todo의 나머지 요소는 변하지 않고 checked요소만 반대로 해준다.\n//         return todo.id === id ? { ...todo, checked: !todo.checked } : todo;\n//       })\n//     );\n//   };\n\n//   // 선택된 체크박스만 삭제\n//   const removeTodo = () => {\n//     const result = todos.filter((value) => value.checked === false);\n//     setTodos(result);\n//   };\n//   return (\n//     <>\n//       <input\n//         type='text'\n//         value={inputTodo}\n//         onChange={(e) => setInputTodo(e.target.value)}\n//         placeholder='할 일 입력...'\n//       ></input>\n//       <button onClick={addTodo}>추가</button>\n//       <ul>\n//         {todos.map((todo) => {\n//           return (\n//             <li key={todo.id}>\n//               <input type='checkbox' checked={todo.checked} onChange={() => toggleTodo(todo.id)} />\n//               {todo.text}\n//             </li>\n//           );\n//         })}\n//       </ul>\n//       <button onClick={removeTodo}>완료된 할 일 삭제</button>\n//     </>\n//   );\n// }\n_s(InputTodo, \"WlD8sH9gY1P6OeSvgx+nEBb/nq8=\");\n_c = InputTodo;\nvar _c;\n$RefreshReg$(_c, \"InputTodo\");","map":{"version":3,"names":["useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","InputTodo","_s","inputTodo","setInputTodo","todoList","setTodoList","todoData","res","method","url","data","AddTodo","newTodo","title","done","console","log","toggleTodo","id","map","todo","removeTodo","deleteData","Number","children","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","checked","_c","$RefreshReg$"],"sources":["C:/Users/82106/Desktop/github/CodingOn-Web/0928_practice/todo_client/src/InputTodo.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default function InputTodo() {\r\n  const [inputTodo, setInputTodo] = useState('');\r\n  const [todoList, setTodoList] = useState([]);\r\n  useEffect(() => {\r\n    const todoData = async () => {\r\n      const res = await axios({\r\n        method: 'GET',\r\n        url: 'http://localhost:8000/todos',\r\n      });\r\n      setTodoList(res.data.data);\r\n    };\r\n    todoData();\r\n  }, []);\r\n\r\n  useEffect(() => {}, [todoList]);\r\n\r\n  const AddTodo = () => {\r\n    const newTodo = {\r\n      title: inputTodo,\r\n      done: false,\r\n    };\r\n    setTodoList([...todoList, newTodo]);\r\n    setInputTodo('');\r\n    const todoData = async () => {\r\n      const res = await axios({\r\n        method: 'POST',\r\n        url: 'http://localhost:8000/todo',\r\n        data: newTodo,\r\n      });\r\n      console.log(res.data.data);\r\n    };\r\n    todoData();\r\n  };\r\n\r\n  // 체크박스 on/off\r\n  const toggleTodo = (id) => {\r\n    console.log(id);\r\n    setTodoList(\r\n      todoList.map((todo) => {\r\n        // console.log(todo);\r\n        // 내가 체크한 박스의 id가 todos에 있는 id와 동일하다면 todo의 나머지 요소는 변하지 않고 checked요소만 반대로 해준다.\r\n        return todo.id === id ? { ...todo, done: !todo.done } : todo;\r\n      })\r\n    );\r\n  };\r\n\r\n  //   선택된 체크박스만 삭제\r\n  const removeTodo = (id) => {\r\n    const deleteData = async () => {\r\n      const res = await axios({\r\n        method: 'DELETE',\r\n        url: `http://localhost:8000/todo/:${id}`,\r\n        data: {\r\n          id: Number(id),\r\n        },\r\n      });\r\n      console.log('a');\r\n    };\r\n    deleteData();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input value={inputTodo} onChange={(e) => setInputTodo(e.target.value)} />\r\n      <button onClick={AddTodo}>추가</button>\r\n\r\n      <ul>\r\n        {todoList.map((todo) => {\r\n          return (\r\n            <li key={todo.id}>\r\n              <input type='checkbox' checked={todo.done} onChange={() => toggleTodo(todo.id)} />\r\n              {todo.title}\r\n              <button onClick={removeTodo}>DELETE</button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\n// import { useState } from 'react';\r\n\r\n// export default function TodoMartin() {\r\n//   const [todos, setTodos] = useState([]); // 할 일 목록\r\n//   const [inputTodo, setInputTodo] = useState('');\r\n\r\n//   const addTodo = () => {\r\n//     // todos는 배열이다. 사용자가 할일을 적으면 그 값이 여기로 추가되도록 구현. 만약 할 일이 10개가 넘으면 경고 메시지 전송\r\n//     if (todos.length > 10) {\r\n//       alert('할 일이 너무 많아요');\r\n//     }\r\n//     if (inputTodo !== '') {\r\n//       // input에 작성한 것이 있을 시에만 작동\r\n//       // 새로운 객체를 만들고 이 객체를 todos에 넣는다.\r\n//       const newTodo = {\r\n//         id: Date.now(),\r\n//         text: inputTodo,\r\n//         checked: false,\r\n//       };\r\n//       setTodos([...todos, newTodo]);\r\n//       // todos에 넣었으면 다시 input창은 빈 문자열로 바뀜\r\n//       setInputTodo('');\r\n//     }\r\n//   };\r\n\r\n//   // 체크박스 on/off\r\n//   const toggleTodo = (id) => {\r\n//     console.log(id);\r\n//     setTodos(\r\n//       todos.map((todo) => {\r\n//         // console.log(todo);\r\n//         // 내가 체크한 박스의 id가 todos에 있는 id와 동일하다면 todo의 나머지 요소는 변하지 않고 checked요소만 반대로 해준다.\r\n//         return todo.id === id ? { ...todo, checked: !todo.checked } : todo;\r\n//       })\r\n//     );\r\n//   };\r\n\r\n//   // 선택된 체크박스만 삭제\r\n//   const removeTodo = () => {\r\n//     const result = todos.filter((value) => value.checked === false);\r\n//     setTodos(result);\r\n//   };\r\n//   return (\r\n//     <>\r\n//       <input\r\n//         type='text'\r\n//         value={inputTodo}\r\n//         onChange={(e) => setInputTodo(e.target.value)}\r\n//         placeholder='할 일 입력...'\r\n//       ></input>\r\n//       <button onClick={addTodo}>추가</button>\r\n//       <ul>\r\n//         {todos.map((todo) => {\r\n//           return (\r\n//             <li key={todo.id}>\r\n//               <input type='checkbox' checked={todo.checked} onChange={() => toggleTodo(todo.id)} />\r\n//               {todo.text}\r\n//             </li>\r\n//           );\r\n//         })}\r\n//       </ul>\r\n//       <button onClick={removeTodo}>완료된 할 일 삭제</button>\r\n//     </>\r\n//   );\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}